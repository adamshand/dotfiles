# Ported from bash 27 June 2021
DEBUG=""
#DEBUG="yes"

test $DEBUG && echo "SHELL: $SHELL HOST: ${HOST%.*} OS: ${OSTYPE:0:6} "

export PATH="${HOME}/bin/noarch:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin"
export WORDCHARS="${WORDCHARS//\//}"  # / breaks a word

export HISTFILE=~/.zhistory
export HISTSIZE=100000        # the number of items for the internal history list
export SAVEHIST=100000

setopt EXTENDED_HISTORY       # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY     # Write to the history file immediately, not when the shell exits.
# setopt SHARE_HISTORY          # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS       # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS   # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS      # Do not display a previously found event.
setopt HIST_SAVE_NO_DUPS      # Do not write a duplicate event to the history file.
setopt HIST_VERIFY            # Do not execute immediately upon history expansion.
setopt APPEND_HISTORY         # Append to history file

# added by adam as experiments (see man zshoptions)
setopt GLOB_STAR_SHORT        # allows **.yml and ***.yml
setopt CHECK_JOBS             # reminds you of background running jobs when exiting
setopt CHECK_RUNNING_JOBS     # reminds you of suspended jobs when exiting
#setopt LIST_TYPES            # show identifying character at end of possible tab completions
#setopt EXTENDED_GLOB         # ls -ld ansible*~*docker*; ls **/*(-@)

# zle -al                                   # list all available actions
# ctrl-w:del-back-word, opt-w:del-forward-word, ctrl-arrow:forward/back-word
bindkey '^[[A'    up-line-or-search         # up arrow
bindkey '^[[B'    down-line-or-search       # down arrow
bindkey '\CI'     expand-or-complete-prefix # allows tab completiion in middle of word
bindkey '\e[1;5D' backward-word             # ctrl-leftArrow move cursor back a word
bindkey '\e[1;5C' forward-word              # ctrl-rightArrow move cursor forward a word
bindkey '^[w'     kill-word                 # opt-w to delete forward word
#bindkey å accept-line                      # literally bind opt-a to an action

export SUDO_PROMPT="Sudo Password: "
export BC_ENV_ARGS="$HOME/.bc"

if [ "${OSTYPE:0:6}" = "darwin" ]; then
  test $DEBUG && echo "DETECTED: darwin"
  DARWIN="yes"

  # do i ever use this? /Library/Developer/CommandLineTools/usr/bin
  export PATH="${HOME}/bin/darwin:/opt/homebrew/bin:${PATH}"

  # needs to come after PATH gets /opt/homebrew/bin
  PYVER=$(python3 --version | awk -F'[ .]' '{print $2"."$3}')
  export PATH="${PATH}:${HOME}/Library/Python/${PYVER}/bin"

  #export MANPATH="${MANPATH}:/usr/share/man"
  # export HOMEBREW_CASK_OPTS="--appdir=~/Applications"
  # export HOMEBREW_AUTO_UPDATE_SECS=86400  # only update once a day

  PSARG="auxww";
  LARG="-lhPO"

  if [ -r "${HOME}/.env" ]; then
    export CF_API_TOKEN=$(awk -F= '/^CF_API_TOKEN=/{print $2}' ~/.env) 
  fi

  alias airport="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport"
  alias cpdir="pwd | pbcopy"
  alias flushdns="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder"
  alias mkdir='mkdir -p'
  alias top="top -o cpu -O vsize"
  alias updatedb="sudo -b /usr/libexec/locate.updatedb"

elif [[ "$OSTYPE" = "linux-gnu" || "$OSTYPE" = "linux" ]]; then
  test $DEBUG && echo "DETECTED: linux"
  LINUX="yes"

  export PATH="${HOME}/bin/linux:${PATH}:/usr/X11R6/bin:${HOME}/.local/bin"
  export MANPATH="${MANPATH}:/usr/share/man:/usr/X11R6/man"

  PSARG="-efww"
  LARG="-lh"

  sentry () {
    if (( ${+commands[sentry.pl]} )); then
      sudo ${commands[sentry.pl]} $*
    fi; }

  #test -z $DISPLAY && export DISPLAY="localhost:0.0"
  if [ -f /etc/debian_version ]; then
    export LESSOPEN="|/usr/bin/lesspipe %s";
    export LESSCLOSE="/usr/bin/lesspipe %s %s";
  elif [ -f /etc/redhat-release ]; then
    eval $(lesspipe.sh)
  fi
fi # end os specific

alias cp='cp -vi'
alias edpro="cme ~/.zshrc && cm apply && exec zsh"
alias egrep='egrep --color=auto'
alias grep='grep --color=auto'
alias mv='mv -vi'
alias mkroot="sudo -E zsh"
alias pico='nano'
#alias nano='nano -EGilxz -T2'
alias pwgen='bw generate -cp --words 2 --separator . --includeNumber | tee >(pbcopy)'

mcd() { mkdir -p $1 && cd $1; }
smcd() { sudo mkdir -p $1 && sudo chown -R adam $1&& cd $1; }

pass() {
  bw list items --search $* --pretty | egrep "(name|username|password)\":" | sed -e 's/^ *//' -e 's/^"//' -e 's/",$//' -e 's/": "/: /' -e 's/^name:/\nname:    /'}

cm()      { chezmoi $*; }
cma()     { chezmoi add $*; }         # add file to chezmoi
cmd()     { chezmoi diff $*; }        # diff chezmoi with $HOME
cme()     { chezmoi edit $*; }
cmf()     { chezmoi forget $*; }      # stop tracking file in chezmoi
cmg()     { chezmoi git $*; }
cmi()     { nano ~/.local/share/chezmoi/.chezmoiignore; }
cminit()  { echo 'chezmoi init sh -c "$(curl -fsLS get.chezmoi.io)" -- init --apply adamshand -b "$HOME/bin/linux/" --ssh --purge-binary'; }
cmst()    { chezmoi status $*; }      # show status of chezmoi
cmu()     { chezmoi update $*; }      # pull updates from git and update $HOME from chezmoi
cmuv()    { chezmoi update -v $*; }  

dps()   { docker ps --format "table {{.Names}}\t {{.Size}}\t {{.Status}}\t {{.Ports}}" | sed -e 's/0.0.0.0://g' -e 's/, :::[0-9]*->[0-9]*\/[tu][cd][p]//g'; }
de()    {
  CONTAINER=$1
  if [ ! "$2" ]; then
    DCMD='sh'
  else
    DCMD=$2
  fi
  shift 2
  docker exec -it ${CONTAINER} ${DCMD} $*; }

#  docker exec -it $1 ${DCMD}; }
dl()    { docker logs --since 24h -f $*; }
dsp()   { docker stop $*; }
dst()   { docker start $*; }
drs()   { docker restart $*; }

if (( ${+commands[docker-compose]} )); then
  DC='docker-compose'
else
  DC='docker compose'
fi
dcu()   { $DC up -d $* && dcl $*; }
dcd()   { $DC down; }
dl()    { docker logs --follow --since=1m --timestamps $*; }
dcl()   { docker-compose logs --follow --timestamps $*; }
dcdu()  { dcd && $DC up -d && dcl; }
flaunt() { egrep "($1|$)"; }        # highlight matches without filtering

gcp() {
  git status -s;
  echo -n "Commit message: ";
  read MSG && \
  git pull;
  git commit -a -m "gcp: $MSG" && \
  git push; }

ipsum() {
    test $1 && P=$1 || P=5
    test $2 && S=$2 || S=3
    curl --silent http://metaphorpsum.com/paragraphs/${P}/${S} | tee >(pbcopy)
  }

more () {
  if (( ${+commands[bat]} )); then
    bat $*
  elif (( ${+commands[less]} )); then
      less -iw $*
  else
      more $*
  fi; }

p() {
  if [ ! $1 ]; then
    ps ${PSARG}
  else
    ps ${PSARG} | grep -iE "[^]]${1}"
  fi; }

showip() {
  # curl -4 ifconfig.co
  dig -4 +short myip.opendns.com a @resolver1.opendns.com
  dig -6 +short myip.opendns.com aaaa @resolver1.opendns.com
}
if (( ${+commands[ssh.sh]} )); then
  s () { ssh.sh $*; }
fi
vade () { links -dump -width 512 http://adam.nz/vade/ | egrep -v '^ *\$' | egrep --color=auto -A2 "^ # .*${1}.*\$" ;}

autoload -U zmv           # zmv '* *' '$f:gs/ /_'; more at: https://strcat.de/zsh/#zmv
autoload -U tetris tetris

if (( ${+commands[exa]} )); then
    alias l='exa -lgh --group --group-directories-first --time-style=long-iso --colour-scale'
    alias ls='exa -Fg --group-directories-first --colour-scale'
else;
    alias l='ls $LARG'
    alias ls='ls -F'
fi

if [[ "${HOST%.*}" = "chimera" ]]; then
  test $DEBUG && echo "DETECTED: chimera"
  PATH=${PATH}:/Users/adam/Library/Python/3.9/bin

  export NVM_DIR="${HOME}/.nvm"
  export PNPM_HOME="${HOME}/Library/pnpm"
  export PATH="$PNPM_HOME:$PATH"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"

elif [[ "${HOST%.*}" = "kauri" ]]; then
  export RESTIC_PASSWORD_FILE="/home/adam/etc/restic.txt"
  export RESTIC_REPOSITORY="/vol/obelix/restic/"

elif [[ "${HOST%.*}" = "beam" || "${HOST%.*}" = "ch-test1" ]]; then
  test $DEBUG && echo "DETECTED: beam or ch-test1 (miro)"
  unalias mkroot
fi # end host specific

if (( ${+commands[git]} )); then
  test $DEBUG && echo "FOUND: git"
  if [[ ! -f ${ZDOTDIR:-${HOME}}/.zcomet/bin/zcomet.zsh ]]; then
    git clone https://github.com/agkozak/zcomet.git ${ZDOTDIR:-${HOME}}/.zcomet/bin
  fi
  source ${ZDOTDIR:-${HOME}}/.zcomet/bin/zcomet.zsh

  # Load a prompt
  zcomet load agkozak/agkozak-zsh-prompt
  # Load some plugins
  zcomet load hlissner/zsh-autopair
  zcomet load zsh-users/zsh-autosuggestions
  zcomet load zsh-users/zsh-completions
  zcomet load zdharma-continuum/fast-syntax-highlighting
  zcomet load zdharma-continuum/history-search-multi-word
  #zcomet load supercrabtree/k          # ls with git information
  #zcomet load agkozak/zsh-z            # smart cd
  #zcomet load ohmyzsh plugins/gitfast  # can't remember
  #zcomet load zpm-zsh/autoenv          # auto run .in/.out when entering/exiting directory

  #zcomet snippet https://iterm2.com/shell_integration/zsh
  #zcomet snippet https://github.com/jreese/zsh-titles/blob/master/titles.plugin.zsh
  #zcomet snippet https://raw.githubusercontent.com/wez/wezterm/main/assets/shell-integration/wezterm.sh
  zcomet snippet https://github.com/wez/wezterm/blob/main/assets/shell-integration/wezterm.sh

  # Run compinit and compile its cache
  zcomet compinit

  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#708090"
  #ZSH_AUTOSUGGEST_COMPLETION_IGNORE="git *"

  AGKOZAK_LEFT_PROMPT_ONLY=1
  AGKOZAK_PROMPT_CHAR=( ❯ ❯ ❮ )
  AGKOZAK_COLORS_PROMPT_CHAR='yellow'
  AGKOZAK_CUSTOM_SYMBOLS=( '⇣⇡' '⇣' '⇡' '+' 'x' '!' '>' '?' 'S')
  AGKOZAK_BLANK_LINES=1
  AGKOZAK_PROMPT_DIRTRIM=0
  ZSHZ_CASE=smart
else
  echo -e "\nerror: git not installed, skipping zcomet installation.\n"
fi

zstyle ':completion:*' menu select

# disables automatic filename completion of first match
setopt noautomenu
setopt nomenucomplete

# case insensitive path-completion
setopt nocaseglob
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

